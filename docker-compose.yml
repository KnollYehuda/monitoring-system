version: '3.4'

networks:
  monitoring-system:
    external: true
    name: "${PROJECT}"

services:

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    user: "${UID}:${GID}"
    restart: on-failure
    hostname: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
      - "15692:15692"
    environment:
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_DEFAULT_USER}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_DEFAULT_PASS}"
    networks:
      - "${PROJECT}"

  postgres:
    image: postgres:15.2
    container_name: postgres
    restart: on-failure
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
    volumes:
      - ${HOST_PWD}/monitoring_system/db/init-database.sh:/docker-entrypoint-initdb.d/init-database.sh
    networks:
      - "${PROJECT}"

  redis:
    image: redis:6.0
    container_name: redis
    restart: on-failure
    volumes:
      - /var/log/redis:/var/log/redis
    healthcheck:
      test: redis-cli ping = "PONG"
      interval: 10s
      timeout: 5s
      retries: 5
    command: --save 30 1
    networks:
      - "${PROJECT}"

  store-randoms-in-file-worker:
    image: monitoring-system
    build:
      target: monitoring-system
    depends_on:
      - rabbitmq
      - redis
    container_name: store-randoms-in-file-worker
    volumes:
      - /tmp:/tmp
    environment:
      METHOD: store-randoms-in-file
      CELERY_DIR: "${CELERY_DIR}"
    restart: on-failure
    networks:
      - "${PROJECT}"

  store-randoms-in-redis-worker:
    image: monitoring-system
    build:
      target: monitoring-system
    depends_on:
      - rabbitmq
      - redis
    container_name: store-randoms-in-redis-worker
    environment:
      METHOD: store-randoms-in-redis
    restart: on-failure
    networks:
      - "${PROJECT}"

  store-images-urls-worker:
    image: monitoring-system
    build:
      target: monitoring-system
    depends_on:
      - rabbitmq
      - redis
      - postgres
    container_name: store-images-urls-worker
    environment:
      METHOD: store-images-urls
    restart: on-failure
    networks:
      - "${PROJECT}"

  celery-beat:
    image: monitoring-system
    build:
      target: monitoring-system
    depends_on:
      - rabbitmq
      - redis
      - postgres
      - store-randoms-in-file-worker
      - store-images-urls-worker
      - store-randoms-in-redis-worker
    container_name: celery-beat
    environment:
      METHOD: beat
    restart: on-failure
    networks:
      - "${PROJECT}"

  flower:
    image: mher/flower:1.2
    depends_on:
      - rabbitmq
      - redis
    ports:
      - "5555:5555"
    container_name: flower
    environment:
      CELERY_BROKER_URL: "${CELERY_BROKER_URL}"
    restart: on-failure
    networks:
      - "${PROJECT}"

  grafana:
    image: grafana/grafana:main-ubuntu
    depends_on:
      - rabbitmq
      - redis
      - postgres
      - prometheus
    ports:
      - "3000:3000"
    volumes:
      - ${HOST_PWD}/monitoring_system/grafana/dashboards:/var/lib/grafana/dashboards
      - ${HOST_PWD}/monitoring_system/grafana/provisioning/dashboards/all.yml:/etc/grafana/provisioning/dashboards/all.yml
      - ${HOST_PWD}/monitoring_system/grafana/provisioning/datasources/all.yml:/etc/grafana/provisioning/datasources/all.yml
    environment:
      - GF_INSTALL_PLUGINS=redis-datasource
    container_name: grafana
    restart: on-failure
    networks:
      - "${PROJECT}"

  prometheus:
    image: prom/prometheus:main
    depends_on:
      - flower
    ports:
      - "9090:9090"
    volumes:
      - ${HOST_PWD}/monitoring_system/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    entrypoint:
      - "/bin/prometheus"
      - "--config.file=/etc/prometheus/prometheus.yml"
    container_name: prometheus
    restart: on-failure
    networks:
      - "${PROJECT}"
  